-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval([st, w], stmt) {
  case stmt of
      Assn (n, ex) -> [st <- [n, evalExpr(st, ex)], w]
    | Skip         -> [st, w]
    | Seq (a, b)   -> eval(eval([st, w], a), b)
    | Read (n)   -> case readWorld(w) of
      [v, wf] -> [st <- [n, v], wf]
    esac
    | Write (ex) -> [st, writeWorld(evalExpr(st, ex), w)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
