-- Parser

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

fun genOp(op) {
  [s(op), fun (l, op, r) { Binop(op, l, r) }]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal { Const(stringInt(x)) } |
  x=lident { Var(x) }                                              |
  inbr[s("("), exp, s(")")]),
    exp = memo $ eta (
    expr(
      {
        [Left, { genOp("!!") }],
        [Left, { genOp("&&") }],
        [Nona, {
          genOp("<="),
          genOp("<"),
          genOp(">="),
          genOp(">"),
          genOp("=="),
          genOp("!=")
        }
        ],
        [Left, {
          genOp("+"),
          genOp("-")
        }
        ],
        [Left, {
          genOp("*"),
          genOp("/"),
          genOp("%")
        }
        ]
      }, primary
    )
  );

var line = memo $ eta  syntax(
  kRead x=inbr[s("("), lident, s(")")] { Read(x) }  |
  kWrite ex=inbr[s("("), exp, s(")")] { Write(ex) } |
  kSkip { Skip }                                    |
  x=lident s[":="] ex=exp { Assn(x, ex) }
);

var stmt = memo $ eta syntax (
  line |
  a=line s[";"] b=stmt { Seq(a, b) }
);


-- Public top-level parser
public parse = stmt;

