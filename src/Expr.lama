-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun parseOp(x) {
  fun (a, b) {
    if compare(x, "+") == 0 then a + b
      elif compare(x, "-") == 0 then a - b
      elif compare(x, "*") == 0 then a * b
      elif compare(x, "/") == 0 then a / b
      elif compare(x, "%") == 0 then a % b
      elif compare(x, "<=") == 0 then a <= b
      elif compare(x, "<") == 0 then a < b
      elif compare(x, "==") == 0 then a == b
      elif compare(x, "!=") == 0 then a != b
      elif compare(x, ">=") == 0 then a >= b
      elif compare(x, ">") == 0 then a > b
    fi
  }
}

public fun evalExpr(st, ex) {
  case ex of
      Const (x)          -> x
    | Var (c)            -> st(c)
    | Binop (op, le, ri) -> parseOp(op)(evalExpr(st, le), evalExpr(st, ri))
  esac
}

