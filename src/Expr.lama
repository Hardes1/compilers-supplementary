-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun parseOp(x) {
  fun (a, b) {
    case x of
      "+" -> a + b
      |"-" -> a - b
      |"*" -> a * b
      |"/" -> a / b
      |"%" -> a % b
      |"==" -> a == b
      |"!=" -> a != b
      |"<" -> a < b
      |"<=" -> a <= b
      |">" -> a > b
      |">=" -> a >= b
    esac
  }
}

public fun evalExpr(st, ex) {
  case ex of
      Const (x)          -> x
    | Var (c)            -> st(c)
    | Binop (op, le, ri) -> parseOp(op)(evalExpr(st, le), evalExpr(st, ri))
  esac
}

