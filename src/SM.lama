-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
      READ         -> "READ"
    | WRITE        -> "WRITE"
    | BINOP (s)    -> sprintf("BINOP %s", s)
    | LD    (x)    -> sprintf("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
    | ST    (x)    -> sprintf("ST %s", x)
    | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}


-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
            { }              -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, cfg@[stk, stt, wld], instructions) {
  case instructions of
      { }     -> cfg
    | he : ta -> case he  of
        CONST (n)   -> eval(env, [n:stk, stt, wld], ta)
      | READ        -> case readWorld(wld) of
        [value, world_final] -> eval(env, [value:stk, stt, world_final], ta)
      esac
      | ST (x)      -> eval(env, [tl(stk), stt <- [x, hd(stk)], wld], ta)
      | LD (x)      -> eval(env, [stt(x):stk, stt, wld], ta)
      | WRITE       -> eval(env, [tl(stk), stt, writeWorld(hd(stk), wld)], ta)
      | BINOP (op)  -> case stk of
        y : t -> eval(env, [(parseOp(op)(hd(t), y)):tl(t), stt, wld], ta)
      esac
      | JMP (l)     -> eval(env, cfg, env.fromLabel(l))
      | CJMP (c, l) -> case c of
          "z"  -> eval(env, [tl(stk), stt, wld], if hd(stk) == 0 then env.fromLabel(l) else ta fi)
        | "nz" -> eval(env, [tl(stk), stt, wld], if hd(stk) != 0 then env.fromLabel(l) else ta fi)
      esac
      | LABEL(_)    -> eval(env, cfg, ta)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun () {
    [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env [0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case env.genLabel of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD(x))]
      | Ref    (x)        -> [false, env, singletonBuffer (LDA(x))]
      | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
      | If (ex, s1, s2) ->
        case env.genLabel of
          [genLab1, env] ->
            case compile(lab, env, s1) of
              [s1LabUsed, env, s1Code] -> case compile(lab, env, s2) of
                [s2LabUsed, env, s2Code] -> [true, env, compileExpr(ex) <+ CJMP("z", genLab1) <+> s1Code <+ JMP(lab) <+> label(genLab1, true) <+> s2Code]
              esac
            esac
        esac
      | While(ex, st)   ->
        case env.genLabel of
          [genLab1, env] ->
            case compile(genLab1, env, st) of
              [s1LabUsed, env, s1Code] -> [s1LabUsed, env, label(genLab1, true) <+> compileExpr(ex) <+ CJMP("z", lab) <+> s1Code <+ JMP(genLab1) <+> label(lab, true)]
            esac
        esac
      | DoWhile(st, ex) ->
        case env.genLabel of
          [genLab1, env] ->
            case compile(lab, env, st) of
              [s1LabUsed, env, s1Code] -> [s1LabUsed, env, label(genLab1, true) <+> s1Code <+> compileExpr(ex) <+ CJMP("nz", genLab1)]
            esac
        esac
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}
